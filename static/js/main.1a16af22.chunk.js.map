{"version":3,"sources":["styles.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","textAlign","paddingTop","spacing","textBtn","width","color","textTransform","divider","margin","playControl","marginBottom","developer","marginTop","App","classes","useState","remainSeconds","setRemainSeconds","localData","localStorage","getItem","isNaN","Number","breakLength","setBreakLength","sessionLength","setSessionLength","status","setStatus","type","setType","intervalID","setIntervalID","displayTimeLeft","setDisplayTimeLeft","audio","document","getElementById","useEffect","min","Math","floor","sec","handleBreakLength","e","newValue","currentTarget","value","handleSessionLength","changeType","str","typeStr","counter","Container","className","maxWidth","Typography","variant","id","Divider","Grid","container","item","xs","sm","ButtonGroup","aria-label","Button","onClick","disabled","style","setItem","setInterval","play","obj","clearInterval","pause","currentTime","align","preload","src","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a16af22.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    textAlign: 'center',\n    // [theme.breakpoints.up('sm')]: {\n    //   textAlign: 'left',\n    // },\n    paddingTop: theme.spacing(2),\n  },\n  textBtn: {\n    width: 62,\n    color: 'black',\n    textTransform: 'lowercase',\n  },\n  divider: {\n    margin: theme.spacing(2, 0),\n  },\n  playControl: {\n    marginBottom: theme.spacing(2),\n  },\n  developer: {\n    margin: 'auto',\n    marginTop: theme.spacing(2),\n  }\n}));\n\nexport default useStyles;","import React, { useState, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport StopIcon from '@material-ui/icons/Stop';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport useStyles from './styles';\n\nfunction App() {\n  const classes = useStyles();\n  const [remainSeconds, setRemainSeconds] = useState(1500);\n  const [breakLength, setBreakLength] = useState(() => {\n    const localData = localStorage.getItem('timerBreakLength');\n    if (localData === null || localData === 'null' || isNaN(localData) || localData === '') {\n      return 5;\n    }\n    return Number(localData);\n  });\n  const [sessionLength, setSessionLength] = useState(() => {\n    const localData = localStorage.getItem('timerSessionLength');\n    if (localData === null || localData === 'null' || isNaN(localData) || localData === '') {\n      setRemainSeconds(25 * 60);\n      return 25;\n    }\n    setRemainSeconds(Number(localData) * 60);\n    return Number(localData);\n  });\n  const [status, setStatus] = useState('stop'); // 'stop' || 'running'\n  const [type, setType] = useState('Session');  // 'Session' || 'Break'\n  const [intervalID, setIntervalID] = useState('');\n  const [displayTimeLeft, setDisplayTimeLeft] = useState('25:00');\n  const audio = document.getElementById(\"beep\");\n  useEffect(() => {\n    let min = Math.floor(remainSeconds / 60);\n    let sec = remainSeconds - min * 60;\n    min = min < 10 ? '0' + min : min;\n    sec = sec < 10 ? '0' + sec : sec;\n    let timeStr = min + ':' + sec;\n    setDisplayTimeLeft(timeStr);\n  }, [remainSeconds]);\n\n  const reset = () => {\n    clearInterval(intervalID);\n    // setBreakLength(5);\n    // setSessionLength(25);\n    // setDisplayTimeLeft('25:00');\n    setRemainSeconds(sessionLength * 60);\n    setStatus('stop');\n    setType('Session');\n    setIntervalID('');\n    audio.pause();\n    audio.currentTime = 0; // be rewound to the beginning\n  }\n  const handleBreakLength = (e) => {\n    if (status === 'running') { return };\n    const newValue = breakLength + Number(e.currentTarget.value);\n    if (newValue < 1 || newValue > 99) { return }\n    setBreakLength(newValue);\n  }\n  const handleSessionLength = (e) => {\n    if (status === 'running') { return };\n    const newValue = sessionLength + Number(e.currentTarget.value);\n    if (newValue < 1 || newValue > 99) { return }\n    setSessionLength(newValue);\n    setRemainSeconds(newValue * 60);\n  }\n\n  const startOrPause = () => {\n    if (status === 'stop') {\n      localStorage.setItem('timerBreakLength', breakLength);\n      localStorage.setItem('timerSessionLength', sessionLength);\n      setStatus('running');\n      let counter = remainSeconds;\n      let typeStr = type;\n      const id = setInterval(() => {\n        counter--;\n        if (counter < 0) {\n          audio.play();\n          let obj = changeType(typeStr);\n          counter = obj.counter;\n          typeStr = obj.typeStr;\n        } else {\n          setRemainSeconds(counter);\n        }\n      }, 1000);\n      setIntervalID(id);\n    } else {\n      setStatus('stop');\n      clearInterval(intervalID);\n    }\n  }\n  const changeType = (str) => {\n    if (str === 'Session') {\n      setType('Break');\n      setRemainSeconds(breakLength * 60);\n      return { typeStr: 'Break', counter: breakLength * 60 }\n    } else {\n      setType('Session');\n      setRemainSeconds(sessionLength * 60);\n      return { typeStr: 'Session', counter: sessionLength * 60 }\n    }\n  }\n  return (\n    <Container className={classes.root} maxWidth=\"sm\">\n      <Typography variant=\"h5\">\n        <span id='timer-label'>{type}</span> Time Countdown\n        </Typography>\n      <Typography variant=\"h5\">\n        <span id='time-left'>{displayTimeLeft}</span><br />\n      </Typography>\n      <span>min&nbsp;&nbsp;sec</span>\n      <Divider className={classes.divider} />\n\n      <Grid container>\n        <Grid item xs={12} sm={4}>\n          <Typography id='session-label'>Session Time Length</Typography>\n          <ButtonGroup variant=\"contained\" aria-label=\"split button\">\n            <Button id='session-decrement' aria-label=\"add\" onClick={handleSessionLength} value='-1'>\n              <RemoveIcon />\n            </Button>\n            <Button className={classes.textBtn} variant='text' disabled style={{ color: 'black' }}>\n              <span id='session-length'>{sessionLength}</span>&nbsp;min\n            </Button>\n            <Button id='session-increment' aria-label=\"add\" onClick={handleSessionLength} value='1'>\n              <AddIcon />\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        <Grid item className={classes.playControl} xs={12} sm={4}>\n          <Typography>&nbsp;</Typography>\n          <ButtonGroup variant=\"contained\" aria-label=\"split button\">\n            <Button id='start_stop' onClick={startOrPause}>\n              <PlayArrowIcon />\n              <PauseIcon />\n            </Button>\n            <Button id='reset' onClick={reset}>\n              <StopIcon />\n              <RefreshIcon />\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <Typography id='break-label'>Break Time Length</Typography>\n          <ButtonGroup variant=\"contained\" aria-label=\"split button\">\n            <Button id='break-decrement' aria-label=\"add\" onClick={handleBreakLength} value='-1'>\n              <RemoveIcon />\n            </Button>\n            <Button className={classes.textBtn} variant='text' disabled style={{ color: 'black' }}>\n              <span id='break-length'>{breakLength}</span>&nbsp;min\n            </Button>\n            <Button id='break-increment' aria-label=\"add\" onClick={handleBreakLength} value='1'>\n              <AddIcon />\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        <div className={classes.developer}>\n          <Typography variant=\"body2\" align='center'>\n            Designed and Coded By Keliang Liu\n          </Typography>\n        </div>\n      </Grid>\n      <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\" />\n    </Container>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}